import { cursor, whisper } from '@oliveai/ldk';
{{ @if (it.isTypeScript) }}
import { Cancellable } from '@oliveai/ldk/dist/cancellable';
{{ /if }}

{{ @if (it.isTypeScript) }}
interface Props {
  cursorPos: cursor.Position;
  listening: boolean;
}
{{ /if }}
export default class CursorWhisper {
{{ @if (it.isTypeScript) }}
  whisper: whisper.Whisper | undefined;

  label: string;

  listener?: Cancellable;

  props: Props;

{{ /if }}
  constructor() {
    this.whisper = undefined;
    this.label = 'Cursor Aptitude Fired';
    this.listener = undefined;
    this.props = {
      cursorPos: { x: 0, y: 0 },
      listening: false,
    };

    this.cursorListenerHandler = this.cursorListenerHandler.bind(this);
  }

  cursorListenerHandler(cursorPos{{it.isTypeScript ? ': cursor.Position' : ''}}) {
    this.update({ cursorPos });
  }

  createComponents() {
    const {
      cursorPos: { x, y },
      listening,
    } = this.props;

    const message{{it.isTypeScript ? ': whisper.Message' : ''}} = {
      type: whisper.WhisperComponentType.Message,
      header: listening
        ? 'Cursor Position is currently:'
        : 'Start listening to see cursor position',
      body: listening ? `(${x}, ${y})` : undefined,
    };

    const button{{it.isTypeScript ? ': whisper.Button' : ''}} = {
      type: whisper.WhisperComponentType.Button,
      label: `${listening ? 'Stop' : 'Start'} listening`,
      onClick: async () => {
        if (listening) {
          this.listener?.cancel();
          delete this.listener;
          this.update({ listening: false });
        } else {
          this.listener = await cursor.listenPosition(this.cursorListenerHandler);
          this.update({ listening: true });
        }
      },
    };

    return [message, button];
  }

  show() {
    whisper
      .create({
        components: this.createComponents(),
        label: this.label,
        onClose: CursorWhisper.onClose,
      })
      .then((newWhisper) => {
        this.whisper = newWhisper;
      });
  }

  update(props{{it.isTypeScript ? ': Partial<Props>' : '' | safe}}) {
    this.props = { ...this.props, ...props };
    this.whisper?.update({
      label: this.label,
      components: this.createComponents(),
    });
  }

  close() {
    this.whisper?.close(CursorWhisper.onClose);
  }

  static onClose(err{{it.isTypeScript ? '?: Error' : ''}}) {
    if (err) {
      console.error('There was an error closing Cursor whisper', err);
    }
    console.log('Cursor whisper closed');
  }
}
