import { cursor, whisper } from '@oliveai/ldk';

import CursorWhisper from './CursorWhisper';

jest.mock('@oliveai/ldk');

const mockWhisperClose = jest.fn();
const mockWhisperUpdate = jest.fn();
const mockListenerCancel = jest.fn();

describe('Cursor Whisper', () => {
  beforeEach(() => {
    whisper.create = jest
      .fn()
      .mockResolvedValueOnce({ close: mockWhisperClose, update: mockWhisperUpdate });
    cursor.listenPosition = jest.fn().mockResolvedValueOnce({ cancel: mockListenerCancel });
  });
  afterEach(() => {
    jest.resetAllMocks();
  });

  it('creates a whisper with expected components and closes it gracefully', async () => {
    const newWhisper = new CursorWhisper();
    newWhisper.show();
    await Promise.resolve();
    newWhisper.close();

    expect(whisper.create).toBeCalledWith(
      expect.objectContaining({
        components: [
          {
            type: whisper.WhisperComponentType.Message,
            header: 'Start listening to see cursor position',
          },
          {
            type: whisper.WhisperComponentType.Button,
            label: 'Start listening',
            onClick: expect.any(Function),
          },
        ],
        label: 'Cursor Aptitude Fired',
        onClose: CursorWhisper.onClose,
      })
    );
    expect(mockWhisperClose).toBeCalled();
  });

  it('creates button that starts and stops the listener', async () => {
    const newWhisper = new CursorWhisper();
    newWhisper.show();
    await Promise.resolve();

    let [, button] = newWhisper.createComponents(){{it.isTypeScript ? ' as [unknown, whisper.Button]' : ''}};

    await button.onClick(undefined, newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(cursor.listenPosition).toBeCalledWith(newWhisper.cursorListenerHandler);
    expect(newWhisper.listener).toBeDefined();
    expect(newWhisper.props.listening).toBeTruthy();

    [, button] = newWhisper.createComponents(){{it.isTypeScript ? ' as [unknown, whisper.Button]' : ''}};

    await button.onClick(undefined, newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(mockListenerCancel).toBeCalled();
    expect(newWhisper.listener).toBeUndefined();
    expect(newWhisper.props.listening).toBeFalsy();
  });

  it('updates as expected for passed in params', async () => {
    const newWhisper = new CursorWhisper();
    newWhisper.show();
    await Promise.resolve();
    newWhisper.update({ listening: true });
    newWhisper.cursorListenerHandler({ x: 1, y: 2 });

    expect(mockWhisperUpdate).toBeCalledWith({
      label: 'Cursor Aptitude Fired',
      components: [
        {
          type: whisper.WhisperComponentType.Message,
          header: 'Cursor Position is currently:',
          body: '(1, 2)',
        },
        {
          type: whisper.WhisperComponentType.Button,
          label: 'Stop listening',
          onClick: expect.any(Function),
        },
      ],
    });
  });

  it.each`
    scenario              | error
    ${'without an error'} | ${undefined}
    ${'with an error'}    | ${new Error('error')}
  `('should close properly $scenario', ({ error }) => {
    CursorWhisper.onClose(error);

    if (error) {
      expect(console.error).toBeCalledWith('There was an error closing Cursor whisper', error);
    }
    expect(console.log).toBeCalledWith('Cursor whisper closed');
  });
});
