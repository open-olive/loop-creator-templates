import { whisper } from '@oliveai/ldk';
import { MessageWhisperCopyMode } from '@oliveai/ldk/dist/whisper/types';

{{ @if (it.isTypeScript) }}
interface Props {
  userEmail: string;
  userJwt: string;
}
{{ /if }}
export default class UserWhisper {
{{ @if (it.isTypeScript) }}
  whisper: whisper.Whisper | undefined;

  label: string;

  props: Props;

{{ /if }}
  constructor(userJwt{{it.isTypeScript ? ': string' : ''}}, userEmail{{it.isTypeScript ? ': string' : ''}}) {
    this.whisper = undefined;
    this.label = 'Example for User Aptitude';
    this.props = {
      userJwt,
      userEmail,
    };
  }

  createComponents() {
    const markdown{{it.isTypeScript ? ': whisper.Markdown' : ''}} = {
      type: whisper.WhisperComponentType.Markdown,
      body: 'The User aptitude is used to get information about the currently logged in user, and can be used to verify that that user is authorized to use your API. When logging in, Olive Helps users are given a JWT token. This token can be accessed using the User Aptitude.',
    };
    const markdown2{{it.isTypeScript ? ': whisper.Markdown' : ''}} = {
      type: whisper.WhisperComponentType.Markdown,
      body: 'To see the data that is on the JWT token, [go to this site](https://jwt.io/) and click the content below to copy your JWT to the clipboard.',
    };
    const markdown3{{it.isTypeScript ? ': whisper.Markdown' : ''}} = {
      type: whisper.WhisperComponentType.Markdown,
      body: `Current JWT for user with email: ${this.props.userEmail}`,
    };
    const message{{it.isTypeScript ? ': whisper.Message' : ''}} = {
      type: whisper.WhisperComponentType.Message,
      body: `${this.props.userJwt}`,
      copyable: MessageWhisperCopyMode.Body,
    };

    return [markdown, markdown2, markdown3, message];
  }

  show() {
    whisper
      .create({
        components: this.createComponents(),
        label: this.label,
        onClose: UserWhisper.onClose,
      })
      .then((newWhisper) => {
        this.whisper = newWhisper;
      });
  }

  close() {
    this.whisper?.close(UserWhisper.onClose);
  }

  static onClose(err{{it.isTypeScript ? '?: Error' : ''}}) {
    if (err) {
      console.error('There was an error closing User whisper', err);
    }
    console.log('User whisper closed');
  }
}
