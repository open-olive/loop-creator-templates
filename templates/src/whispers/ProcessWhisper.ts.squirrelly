import { whisper } from '@oliveai/ldk';
{{ @if (it.isTypeScript) }}
import { ProcessInfo } from '@oliveai/ldk/dist/process';
{{ /if }}

export default class ProcessWhisper {
{{ @if (it.isTypeScript) }}
  whisper: whisper.Whisper | undefined;

  label: string;

  processes: ProcessInfo[];

{{ /if }}
  constructor(processes{{it.isTypeScript ? ': ProcessInfo[]' : ''}}) {
    this.whisper = undefined;
    this.label = 'Example for Process Aptitude';
    this.processes = processes;
  }

  createComponents() {
    const components{{ it.isTypeScript ? ': whisper.Component[]' : ''}} = [];
    this.processes.forEach((process) => {
      components.push({
        type: whisper.WhisperComponentType.Markdown,
        body: `${process.command} (${process.pid})`,
      });
    });

    return components;
  }

  show() {
    whisper
      .create({
        components: this.createComponents(),
        label: this.label,
        onClose: ProcessWhisper.onClose,
      })
      .then((newWhisper) => {
        this.whisper = newWhisper;
      });
  }

  close() {
    this.whisper?.close(ProcessWhisper.onClose);
  }

  static onClose(err{{it.isTypeScript ? '?: Error' : ''}}) {
    if (err) {
      console.error('There was an error closing Process whisper', err);
    }
    console.log('Process whisper closed');
  }
}
