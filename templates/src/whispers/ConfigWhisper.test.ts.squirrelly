import { whisper } from '@oliveai/ldk';
import ConfigWhisper, { onClose } from './ConfigWhisper';

jest.mock('@oliveai/ldk');

const mockWhisperClose = jest.fn();

const TEST_PARAM_STR = '{"feature":{"button":true}}';
const TEST_PARAM_STR_FALSE = '{"feature":{"button":false}}';

describe('Config Whisper', () => {
  beforeEach(() => {
    whisper.create = jest.fn().mockResolvedValueOnce({ close: mockWhisperClose });
  });
  afterEach(() => {
    jest.resetAllMocks();
  });

  it('creates a whisper with a button and closes it gracefully', async () => {
    const newWhisper = await ConfigWhisper.show(TEST_PARAM_STR);
    newWhisper.close(() => null);

    expect(whisper.create).toBeCalledWith({
      components: [
        {
          type: whisper.WhisperComponentType.Markdown,
          body: expect.stringContaining(TEST_PARAM_STR),
        },
        {
          type: whisper.WhisperComponentType.Button,
          label: 'Button',
          onClick: expect.any(Function),
        },
      ],
      label: 'Config Aptitude Fired',
      onClose,
    });
    expect(mockWhisperClose).toBeCalled();
  });

  it('creates a whisper without a button and closes it gracefully', async () => {
    const newWhisper = await ConfigWhisper.show(TEST_PARAM_STR_FALSE);
    newWhisper.close(() => null);

    expect(whisper.create).toBeCalledWith({
      components: [
        {
          type: whisper.WhisperComponentType.Markdown,
          body: expect.stringContaining(TEST_PARAM_STR_FALSE),
        },
      ],
      label: 'Config Aptitude Fired',
      onClose,
    });
    expect(mockWhisperClose).toBeCalled();
  });


  it.each`
    scenario              | error
    ${'without an error'} | ${undefined}
    ${'with an error'}    | ${new Error('error')}
  `('should close properly $scenario', ({ error }) => {
    onClose(error);

    if (error) {
      expect(console.error).toBeCalledWith('There was an error closing the Config whisper', error);
    }
    expect(console.log).toBeCalledWith('Config whisper closed');
  });
});
