import { document } from '@oliveai/ldk';
{{ @if (it.isTypeScript) }}
import { Workbook } from '@oliveai/ldk/dist/document/types';
{{ /if }}
import { documentExample } from '..';

jest.mock('@oliveai/ldk');

const mockDocumentWhisperShow = jest.fn();

jest.mock('../../whispers', () => {
  return {
    DocumentWhisper: {
      show: jest.fn(() => mockDocumentWhisperShow()),
    },
  };
});

describe('Document Aptitude', () => {
  afterEach(() => {
    jest.resetAllMocks();
  });

  it('calls whisper with the correct data', async () => {
    const workbook{{ it.isTypeScript ? ': Workbook' : '' }} = {
      worksheets: [
        {
          hidden: false,
          hiddenColumns: [],
          hiddenRows: [],
          name: 'Iron Man',
          rows: [{ cells: [{ value: 'Message' }, { value: 'This will show up on whisper' }] }],
        },
      ],
    };

    document.xlsxEncode = jest.fn().mockResolvedValue(new Uint8Array());
    document.xlsxDecode = jest.fn().mockResolvedValueOnce(workbook);

    await documentExample.run();

    expect(document.xlsxEncode).toBeCalled();
    expect(document.xlsxDecode).toBeCalled();
    expect(console.log).toBeCalled();
    expect(mockDocumentWhisperShow).toBeCalled();
  });
});
