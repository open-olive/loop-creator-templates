import { user } from '@oliveai/ldk';
// We're going to use the buffer npm package to make it easy to decode the jwt
// This can be installed with `npm i buffer`
import { Buffer } from 'buffer';

import { UserWhisper } from '../../whispers';

const dashRegExp = new RegExp('-', 'g');
const underscoreRegExp = new RegExp('_', 'g');

function atob(b64EncodedString{{ it.isTypeScript ? ': string' : '' }}) {
  // RFC 4648 substitues - for + and _ for / to be url and filesystem safe
  const replaced = b64EncodedString.replace(dashRegExp, '+').replace(underscoreRegExp, '/');
  const decoded = Buffer.from(replaced, 'base64').toString();
  return decoded;
}

function decodeJwt(encodedJwt{{ it.isTypeScript ? ': string' : '' }}) {
  // A JWT is encoded in base-64 with .'s seperating each section
  // header.payload.signature
  const jwtParts = encodedJwt.split('.');
  const encodedHeader = jwtParts[0];
  const encodedPayload = jwtParts[1];
  const encodedSignature = jwtParts[2];
  const header = JSON.parse(atob(encodedHeader));
  const payload = JSON.parse(atob(encodedPayload));
  const signature = atob(encodedSignature);
  const decodedJwt = { header, payload, signature };
  return decodedJwt;
}

const run = async () => {
  const config = { includeEmail: true };
  const token = await user.jwt(config);
  const decodedJwt = decodeJwt(token);
  const { payload } = decodedJwt;
  const whisper = new UserWhisper(token, payload.email);
  whisper.show();
};

export default { run };
