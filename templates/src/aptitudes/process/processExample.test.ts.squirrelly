import { process } from '@oliveai/ldk';
{{ @if (it.isTypeScript) }}
import { ProcessInfo } from '@oliveai/ldk/dist/process';
{{ /if }}
import { ProcessWhisper } from '../../whispers';
import processExample from './processExample';

jest.mock('@oliveai/ldk');

const mockProcessShow = jest.fn();
jest.mock('../../whispers', () => {
  return {
    ProcessWhisper: jest.fn().mockImplementation(() => {
      return { show: mockProcessShow };
    }),
  };
});

describe('Process Example', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should create the whisper after retreiving all processes', async () => {
    const processStub{{it.isTypeScript ? ': ProcessInfo' : ''}} = {
      pid: 100,
      command: 'Test',
      arguments: '',
    };
    process.all = jest.fn().mockResolvedValueOnce([processStub]);

    await processExample.run();

    expect(ProcessWhisper).toBeCalledWith([processStub]);
    expect(mockProcessShow).toBeCalled();
  });
});
