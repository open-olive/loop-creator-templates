import { search } from '@oliveai/ldk';
import { SearchWhisper } from '../../whispers';

export function personToDocument(person{{it.isTypeScript ? ': string' : ''}}) {
  return {
    name: person,
    fields: [
      {
        name: 'firstName',
        displayName: 'First Name',
        type: search.FieldType.standard,
      },
      {
        name: 'lastName',
        displayName: 'Last Name',
        type: search.FieldType.standard,
      },
    ],
    data: JSON.stringify([
      {
        firstName: person.split(' ')[0],
        lastName: person.split(' ')[1],
      },
    ]),
  };
}

export function getPeople() {
  return ['George Smith', 'George Jones', 'Alex Smith', 'Geoffrey McPerson', 'Jones Gregory'];
}

// There are many ways you could retrieve or build up your document objects
// for now we've just built up a small set of various first and last names
export function getDocuments() {
  return getPeople().map(personToDocument);
}

// See https://open-olive.github.io/loop-development-kit/ldk/javascript/interfaces/config.html
// for info on the config object
export function getConfig() {
  return {
    sortBy: ['-lastName', 'firstName'],
    searchSize: 2,
    exactMatchThreshold: 4,
    beginWithSearch: true,
  };
}

const indexName = 'myIndex';
const documents = getDocuments();
const config = getConfig();

const run = async () => {
  await search.createIndex(indexName, documents, config).then((myNewIndex) => {
    // Using a hard coded search here to illustrate the example.
    myNewIndex.search('geo').then((result) => {
      SearchWhisper.show(JSON.stringify(result));
    });
  });
};

export default { run };
